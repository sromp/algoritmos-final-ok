HICE LA FUNCION DatosCartelera Y LLENÉ LOS DATOS.

		static void Main(string[] args)
		{
			DatosPelicula[] datosPeliculasPorMes;
			DatosCartelera(datosPeliculasPorMes);
		}

		static void DatosCartelera(DatosPelicula[] lista)
        {
			for(int i=0;i<lista.Length;i++)
            {
				Console.WriteLine("Nombre de la película " + (i + 1) + ":");
				lista[i].nombre = Console.ReadLine();
				EscribeYLeeDouble("Costo boleto de adulto para la película " + (i + 1) + ":", "ERROR: TU COSTO NO PUEDE SER NEGATIVO Y DEBE SER UN NÚMERO.", out lista[i].costoAdulto, 0, double.MaxValue);
				EscribeYLeeDouble("Costo boleto de menores para la película " + (i + 1) + ":", "ERROR: TU COSTO NO PUEDE SER NEGATIVO Y DEBE SER UN NÚMERO.", out lista[i].costoMenores, 0, double.MaxValue);
			}


        }

--------------------------------------------------------------------------------
AGREGUÉ LA CANTIDAD DE PELÍCULAS EN EL Main Y LE ASIGNÉ LA VARIABLE n


		static void Main(string[] args)
		{
			int n;
			Console.WriteLine("Cantidad de películas:");
			EscribeYLeeInt("Cantidad de películas:", "ERROR: TU CANTIDAD NO PUEDE SER NEGATIVA Y DEBE SER UN NÚMERO.", out n, 0, int.MaxValue);
			DatosPelicula[] datosPeliculas = new DatosPelicula[n];

			DatosCartelera(datosPeliculas);
		}
----------------------------------------------------------------------------------
QUITÉ EL PRIMER WriteLine DE "Cant. de peli." 

static void Main(string[] args)
		{
			int n;
			EscribeYLeeInt("Cantidad de películas:", "ERROR: TU CANTIDAD NO PUEDE SER NEGATIVA Y DEBE SER UN NÚMERO.", out n, 0, int.MaxValue);
			DatosPelicula[] datosPeliculas = new DatosPelicula[n]; // CAMBIAR ESTO PARA LLENAR COMO QUIERA EL USUARIO Y DEFINIR TAMAÑO

			DatosCartelera(datosPeliculas);

			MuestraResultados(datosPeliculas);
		}
----------------------------------------------------------------------------------
CASE 4, 5, 6, 7, 8, 9

case 4: // 4)	Mostrar película con más boletos vendidos // Uribe
						{
							PeliculaMasVendida(tabla);
							break;
						}
					case 5: // 5)	Mostrar película con menos boletos vendidos // Uribe
						{
							PeliculaMenosVendida(tabla);
							break;
						}
					case 6: // 6)	Mostrar película con mayores recaudaciones (tras descuentos) // Uribe	(recaudaciones = boletosAdulto*costoBoletoAdulto + boletosMenor*costoBoletoMenor - descuentos) // funcion (arregloPeliculas) --> (datoPelicula)
						{
							PeliculaMasRecaudaciones(tabla);
							break;
						}
					case 7: // 7)	Mostrar película con menores recaudaciones (tras descuentos) // Uribe
						{
							PeliculaMenosRecaudaciones(tabla);
							break;
						}
					case 8: // 8)	Mostrar cantidad de boletos vendidos a menores // Uribe
						{
							BoletosMenores(tabla);
							break;
						}
					case 9: // 9)	Mostrar cantidad de boletos vendidos a adultos // Uribe
						{
							BoletosAdultos(tabla);
							break;
						}

---

//case 4
		static DatosPelicula PeliculaMasVendida(DatosPelicula[] lista)
		{
			double max = -1;
			int total = 0;
			DatosPelicula DatosPelicula = lista[0];
			for (int i = 0; i < lista.Length; i++)
			{
				total = lista[i].boletosVendidosAdulto + lista[i].boletosVendidosMenores;
				if (total > max)
				{
					max = total;
					DatosPelicula = lista[i];
				}
			}
			return DatosPelicula;
		}

		//case 5
		static DatosPelicula PeliculaMenosVendida(DatosPelicula[] lista)
		{
			double min = double.MaxValue;
			int total = 0;
			DatosPelicula DatosPelicula = lista[0];
			for (int i = 0; i < lista.Length; i++)
			{
				total = lista[i].boletosVendidosAdulto + lista[i].boletosVendidosMenores;
				if (total < min)
				{
					min = total;
					DatosPelicula = lista[i];
				}
			}
			return DatosPelicula;
		}

		//case 6
		static DatosPelicula PeliculaMasRecaudaciones(DatosPelicula[] lista)
        {
			double recaudaciones, max=-1;
			DatosPelicula DatosPelicula = lista[0];
			for (int i = 0; i < lista.Length; i++)
			{
				recaudaciones = (lista[i].boletosVendidosAdulto * lista[i].costoAdulto) + (lista[i].boletosVendidosMenores * lista[i].costoMenores);
				if (recaudaciones > max)
				{
					max = recaudaciones;
					DatosPelicula = lista[i];
				}
			}
			return DatosPelicula;
        }

		//case 7
		static DatosPelicula PeliculaMenosRecaudaciones(DatosPelicula[] lista)
		{
			double recaudaciones, min = double.MaxValue;
			DatosPelicula DatosPelicula = lista[0];
			for (int i = 0; i < lista.Length; i++)
			{
				recaudaciones = (lista[i].boletosVendidosAdulto * lista[i].costoAdulto) + (lista[i].boletosVendidosMenores * lista[i].costoMenores);
				if (recaudaciones < min)
				{
					min = recaudaciones;
					DatosPelicula = lista[i];
				}
			}
			return DatosPelicula;
		}

		//case 8
		static DatosPelicula BoletosMenores(DatosPelicula[] lista)
		{
			int total = 0;
			DatosPelicula DatosPelicula = lista[0];
			for (int i = 0; i < lista.Length; i++)
			{
				total = total + lista[i].boletosVendidosMenores;
			}
			return DatosPelicula;
		}

		//case 9
		static DatosPelicula BoletosAdultos(DatosPelicula[] lista)
		{
			int total = 0;
			DatosPelicula DatosPelicula = lista[0];
			for (int i = 0; i < lista.Length; i++)
			{
				total = total + lista[i].boletosVendidosAdulto;
			}
			return DatosPelicula;
		}
